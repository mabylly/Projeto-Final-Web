// Este bloco define como o Prisma se conecta ao banco de dados e gera o cliente.
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // Conforme especificado na descrição do projeto
  url      = "file:./dev.db"
}

// Substitui o mock 'userModels.ts'.
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String // Armazenará a senha com hash
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Um usuário pode ter muitas buscas (seu histórico)
  Searches Search[]
}

model Search {
  id    String @id @default(cuid())
  topic String
  grade String

  userId String // Link para o usuário que fez a busca.
  user   User   @relation(fields: [userId], references: [id])

  resultCards ResultCard[] // Cada busca tem uma coleção de cards de resultado.

  createdAt DateTime @default(now())
}

// Salva CADA card individualmente. Esta é a implementação da "Opção 1".
model ResultCard {
  id    String   @id @default(cuid())
  type  CardType // 'definition', 'curiosities', etc.
  title String
  order Int // Para manter a ordem original que a IA retornou.

  // Salvamos o objeto 'content' de cada card diretamente como JSON.
  content Json

  searchId String // Link para a busca à qual este card pertence.
  search   Search @relation(fields: [searchId], references: [id])
}

// Garante a consistência dos tipos de card.
enum CardType {
  definition
  curiosities
  multiple_choice_question
  open_ended_question
  book_recommendation
}
