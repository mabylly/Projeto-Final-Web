// Este bloco define como o Prisma se conecta ao banco de dados e gera o cliente.
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // Conforme especificado na descrição do projeto
  url      = "file:./dev.db"
}

// Substitui o mock 'userModels.ts'.
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String // Armazenará a senha com hash
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relação: Um professor (User) pode ter várias turmas (Class)
  classes   Class[]
}

model Class {
  id        String   @id @default(cuid())
  name      String   // Ex: "Turma 901"
  grade     String   // Ex: "9º ano (Fundamental)"
  createdAt DateTime @default(now())

  // Relação com o Professor
  teacherId String
  teacher   User     @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  // Relação: Uma turma pode ter vários recursos associados
  resources EducationalResource[]
}

// Tabela principal para os recursos que serão buscados.
model EducationalResource {
  id      String @id @default(cuid())
  topic   String // Corresponde ao "tema" da Searchpage.tsx
  grade   String // Corresponde à "serie" da Searchpage.tsx
  type    String // Ex: "Artigo", "Vídeo", "Atividade"
  content String // O conteúdo ou link para o recurso

  createdAt DateTime @default(now())

  // Relação com a Turma (opcional)
  classId String?
  class   Class?  @relation(fields: [classId], references: [id])

  // Relação: Um recurso pode ter vários conteúdos gerados pela IA
  generatedContents GeneratedContent[]
}

// Tabela para armazenar as respostas específicas da IA do Gemini.
model GeneratedContent {
  id        String   @id @default(cuid())
  type      String   // Ex: "definição", "multipla_escolha", "dissertativa"
  content   String   // Usar um campo de texto longo para o conteúdo da IA
  createdAt DateTime @default(now())

  // Relação com o Recurso Educacional
  resourceId String
  resource   EducationalResource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
}